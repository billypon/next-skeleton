diff --git a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
index d28e499..40bb6a5 100644
--- a/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
+++ b/node_modules/pug-as-jsx-utils/dist/pug-as-jsx-utils.cjs.js
@@ -9,6 +9,16 @@ var prettier = _interopDefault(require('prettier'));
 var jsc = _interopDefault(require('jscodeshift'));
 var babel = _interopDefault(require('@babel/core'));
 
+var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
+
+var escapeStringRegexp = function (str) {
+  if (typeof str !== 'string') {
+    throw new TypeError('Expected a string');
+  }
+
+  return str.replace(matchOperatorsRe, '\\$&');
+};
+
 const reservedWords = ['Object', 'String', 'Number', 'Array', 'JSON', 'Math', 'null'];
 
 const isReactElement = node => node.parent.parent.node.type === 'JSXElement' && node.node.name.search(/^[a-z]/) === 0;
@@ -85,18 +95,61 @@ const analyzeJsx = (jsxOutput, options = {}) => {
 
     if (p.parent.node.type === 'Property' && p.parent.node.key === p.node) {
       return false;
+    } // exclude require call
+
+
+    if (p.parent.node.type === 'CallExpression' && p.node.name === 'require') {
+      return false;
+    } // exclude namespace key
+
+
+    if (p.parent.node.type === 'JSXNamespacedName') {
+      return false;
     }
 
     return true;
   }).forEach(p => {
     variables = [...variables, p.node.name];
   });
-  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1)).sort();
+  variables = arrayUnique(variables.filter(e => varsToIgnore.indexOf(e) === -1).map(x => x.split('-')[0])).sort(); // Get require.
+
+  let requires = {};
+  jsxRoot.find(jsc.JSXAttribute).filter(p => {
+    const {
+      value
+    } = p.node;
+
+    if (value.type === 'JSXExpressionContainer') {
+      const {
+        expression
+      } = value;
+
+      if (expression && expression.type === 'CallExpression' && expression.callee.name === 'require') {
+        return true;
+      }
+    }
+
+    return false;
+  }).forEach(p => {
+    const {
+      value: {
+        expression
+      }
+    } = p.node;
+    const [target] = expression.arguments;
+
+    if (/^(['"]).*\1$/.test(target.raw)) {
+      const key = hashCode(target.value);
+      requires[`require\\(${escapeStringRegexp(target.raw)}\\)`] = [`require_${key}`, target.value];
+    }
+  });
   return {
     useThis,
     useMacro: !!variables.find(e => e === '__macro'),
     useFragment: !!variables.find(e => e === 'Fragment'),
-    variables: variables.filter(e => ['__macro', 'Fragment'].indexOf(e) === -1)
+    useRequire: !!Object.keys(requires).length,
+    variables: variables.filter(e => ['__macro', 'Fragment'].indexOf(e) === -1),
+    requires
   };
 };
 
@@ -970,7 +1023,9 @@ const toJsx = (source, options = {}) => {
 
   let jsxCode = `\n${pug.render(pugCode, {
     pretty: true,
-    plugins
+    plugins,
+    filename: options.resourcePath,
+    basedir: options.rootDir
   })}\n`; // post-processing pug.render
   // post-processing is performed in the reverse order of pre-processing
 
@@ -1027,6 +1082,11 @@ const toJsx = (source, options = {}) => {
       imports
     } = getImports(analyzed.variables, resolves);
     const variables = analyzed.variables.filter(e => used.indexOf(e) === -1);
+
+    if (analyzed.useRequire) {
+      Object.entries(analyzed.requires).forEach(([search, [replacement]]) => result.jsx = result.jsx.replace(new RegExp(search, 'g'), replacement));
+    }
+
     result = { ...result,
       ...analyzed,
       variables,
@@ -1078,6 +1138,21 @@ const pugToJsx = (source, userOptions = {}) => {
   const [_module, _import] = getPragma(options.pragma);
 
   if (options.template) {
+    result.imports = result.imports.concat(Object.values(result.requires).map(([name, moduleName]) => ({
+      name,
+      moduleName
+    }))); // next
+
+    if (result.variables.includes('Link')) {
+      result.imports.push({
+        name: 'Link',
+        moduleName: 'next/link'
+      });
+      result.variables = result.variables.filter(x => x !== 'Link');
+    } // twist
+
+
+    result.jsx = result.jsx.replace(/(<\/?)([^\-:>\s\n]+(-[^\-:>\s\n]+)+)/g, (p0, p1, p2) => `${p1}${p2.replace(/-/g, '.')}`).replace(/(<\/?)([^.:>\s\n]+(\.[^.:>\s\n]+)+):([^.:>\s\n]+)/g, (p0, p1, p2, p3, p4) => `${p1}${p2}_${p4}`);
     const jsxTemplate = [result.useFragment ? `import ${_import}, { Fragment } from '${_module}';` : `import ${_import} from '${_module}';`, ...(result.imports || []).map(({
       name,
       member,
